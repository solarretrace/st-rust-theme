%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
name: SimpleRust
file_extensions: rs
scope: source.simplerust

variables:
  identifier: '(?:(?:r\#)?{{non_raw_identifier}})'
  camel_identifier: '\b_*[A-Z][a-zA-Z0-9_]*[a-z][a-zA-Z0-9_]*\b'
  upper_identifier: '\b_*[A-Z][a-zA-Z0-9_]*\b'
  non_raw_identifier: '[[:alpha:]][_[:alnum:]]*|_[_[:alnum:]]+'
  lifetime: '''(?:_|{{non_raw_identifier}})(?!\'')\b'

  escaped_byte: '\\([nrt0\"''\\]|x\h{2})'
  escaped_char: '\\([nrt0\"''\\]|x[0-7]\h|u\{(?:\h_*){1,6}\})'

  int_suffixes: '[iu](?:8|16|32|64|128|size)'
  dec_literal: '[0-9](?:[0-9_])*'
  float_suffixes: 'f(32|64)'
  float_exponent: '[eE][+-]?[0-9_]*[0-9][0-9_]*'

  abstract: '\b(?<!r\#)abstract\b'
  as: '\b(?<!r\#)as\b'
  async: '\b(?<!r\#)async\b'
  await: '\b(?<!r\#)await\b'
  become: '\b(?<!r\#)become\b'
  box: '\b(?<!r\#)box\b'
  break: '\b(?<!r\#)break\b'
  const: '\b(?<!r\#)const\b'
  continue: '\b(?<!r\#)continue\b'
  crate: '\b(?<!r\#)crate\b'
  do: '\b(?<!r\#)do\b'
  dyn: '\b(?<!r\#)dyn\b'
  else: '\b(?<!r\#)else\b'
  enum: '\b(?<!r\#)enum\b'
  extern: '\b(?<!r\#)extern\b'
  false: '\b(?<!r\#)false\b'
  final: '\b(?<!r\#)final\b'
  fn: '\b(?<!r\#)fn\b'
  for: '\b(?<!r\#)for\b'
  if: '\b(?<!r\#)if\b'
  impl: '\b(?<!r\#)impl\b'
  in: '\b(?<!r\#)in\b'
  let: '\b(?<!r\#)let\b'
  loop: '\b(?<!r\#)loop\b'
  macro: '\b(?<!r\#)macro\b'
  match: '\b(?<!r\#)match\b'
  mod: '\b(?<!r\#)mod\b'
  move: '\b(?<!r\#)move\b'
  mut: '\b(?<!r\#)mut\b'
  override: '\b(?<!r\#)override\b'
  priv: '\b(?<!r\#)priv\b'
  pub: '\b(?<!r\#)pub\b'
  ref: '\b(?<!r\#)ref\b'
  return: '\b(?<!r\#)return\b'
  self: '\b(?<!r\#)self\b'
  Self: '\b(?<!r\#)Self\b'
  static: '\b(?<!r\#)static\b'
  struct: '\b(?<!r\#)struct\b'
  super: '\b(?<!r\#)super\b'
  trait: '\b(?<!r\#)trait\b'
  true: '\b(?<!r\#)true\b'
  try: '\b(?<!r\#)try\b'
  type: '\b(?<!r\#)type\b'
  typeof: '\b(?<!r\#)typeof\b'
  union: '\b(?<!r\#)union\b'
  unsafe: '\b(?<!r\#)unsafe\b'
  unsized: '\b(?<!r\#)unsized\b'
  use: '\b(?<!r\#)use\b'
  virtual: '\b(?<!r\#)virtual\b'
  where: '\b(?<!r\#)where\b'
  while: '\b(?<!r\#)while\b'
  yield: '\b(?<!r\#)yield\b'

contexts:
  # The prototype context is prepended to all contexts but those setting
  # meta_include_prototype: false.
  prototype:
    # Comments are allowed everywhere.
    - include: comments
    # Macro variables are allowed everywhere.
    - match: '\${{identifier}}'
      scope: variable.other.simplerust

  main:
    - include: operators
    - include: attributes

    - match: '{{identifier}}!'
      scope: entity.name.macro.simplerust

    - match: '(default\s+)?({{fn}})\s+({{identifier}})'
      captures:
        1: keyword.declaration.simplerust
        2: keyword.declaration.simplerust
        3: entity.name.function.simplerust
    - include: keywords

    - match: '\b{{int_suffixes}}\b'
      scope: storage.type.simplerust
    - match: '\b{{float_suffixes}}\b'
      scope: storage.type.simplerust
    - match: '\b(bool|str|char)\b'
      scope: storage.type.simplerust
    - match: '{{lifetime}}'
      scope: storage.type.simplerust
    - match: '{{camel_identifier}}'
      scope: storage.type.simplerust
    - match: '{{upper_identifier}}'
      scope: storage.type.simplerust
    - match: '{{identifier}}!'
      scope: entity.name.macro.simplerust
    - match: '{{identifier}}'
      scope: entity.name.simplerust

    - include: strings
    - include: chars
    - include: numbers


  keywords:
    - match: '(?x)
        {{abstract}}|
        {{become}}|
        {{box}}|
        {{do}}|
        {{final}}|
        {{macro}}|
        {{override}}|
        {{priv}}|
        {{try}}|
        {{typeof}}|
        {{unsized}}|
        {{virtual}}|
        {{yield}}'
      scope: invalid.illegal.simplerust

    - match: '(?x)
        {{async}}|
        {{const}}|
        {{dyn}}|
        {{enum}}|
        {{extern}}|
        {{fn}}|
        {{impl}}|
        {{let}}|
        {{mod}}|
        {{move}}|
        {{mut}}|
        {{pub}}|
        {{ref}}|
        {{static}}|
        {{struct}}|
        {{trait}}|
        {{type}}|
        {{union}}|
        {{unsafe}}|
        {{use}}|
        {{where}}'
      scope: keyword.declaration.simplerust

    - match: '(?x)
        {{break}}|
        {{continue}}|
        {{for}}|
        {{in}}|
        {{loop}}|
        {{match}}|
        {{return}}|
        {{while}}'
      scope: keyword.control.simplerust

    - match: '{{else}}|{{if}}'
      scope: keyword.control.conditional.simplerust

    - match: '{{self}}|{{super}}|{{crate}}'
      scope: keyword.other.simplerust

    - match: '{{Self}}'
      scope: storage.type.simplerust

    - match: '{{true}}|{{false}}'
      scope: constant.language.simplerust

  operators:
    - match: '\?'
      scope: keyword.control.simplerust
    - match: '(\.\.\.|\.\.|\.\.=|\*|&)'
      scope: keyword.operator.simplerust
    - match: '{{as}}|{{await}}'
      scope: keyword.operator.word.simplerust
    - match: '(\+|\+=|-|-=|\*|\*=|/|/=|%|%=)'
      scope: keyword.operator.arithmetic.simplerust
    - match: '(&|&=|\||\|=|\^|\^=|!|!=)'
      scope: keyword.operator.boolean.simplerust
    - match: '(!|==|!=|>|>=|<|<=|&&|\|\|)'
      scope: keyword.operator.logical.simplerust
    - match: '='
      scope: keyword.operator.assignment.simplerust
    - match: '(\.|::)'
      scope: punctuation.accessor.simplerust
    - match: '(=>|->|:|@)'
      scope: punctuation.simplerust
    - match: ','
      scope: punctuation.separator.simplerust
    - match: ';'
      scope: punctuation.terminator.simplerust
    - match: '\\'
      scope: punctuation.separator.continuation.simplerust


  # Attributes
  # ============================================================================
  attributes:
    - include: inner-attribute
    - include: outer-attribute

  attribute-entry:
    - match: '({{identifier}})(\()'
      captures:
        1: entity.name.attribute.simplerust
        2: punctuation.definition.simplerust
      push:
        - include: attribute-entry-inner
        - match: '\)'
          scope: punctuation.definition.simplerust
          pop: true
    - match: '({{identifier}})(\[)'
      captures:
        1: entity.name.attribute.simplerust
        2: punctuation.definition.simplerust
      push:
        - include: attribute-entry-inner
        - match: '\]'
          scope: punctuation.definition.simplerust
          pop: true
    - match: '({{identifier}})(\{)'
      captures:
        1: entity.name.attribute.simplerust
        2: punctuation.definition.simplerust
      push:
        - include: attribute-entry-inner
        - match: '\}'
          scope: punctuation.definition.simplerust
          pop: true

  attribute-entry-inner:
    - match: '{{identifier}}(\()'
      captures:
        1: punctuation.definition.simplerust
      push:
        - include: attribute-entry-inner
        - match: '\)'
          scope: punctuation.definition.simplerust
          pop: true
    - match: '{{identifier}}(\[)'
      captures:
        1: punctuation.definition.simplerust
      push:
        - include: attribute-entry-inner
        - match: '\]'
          scope: punctuation.definition.simplerust
          pop: true
    - match: '{{identifier}}(\{)'
      captures:
        1: punctuation.definition.simplerust
      push:
        - include: attribute-entry-inner
        - match: '\}'
          scope: punctuation.definition.simplerust
          pop: true


  inner-attribute:
    - match: '#!\['
      scope: punctuation.definition.attribute.begin.simplerust
      push:
        - meta_include_prototype: false
        - meta_scope: meta.annotation.simplerust
        - match: '\]'
          scope: punctuation.definition.attribute.end.simplerust
          pop: true
        - match: ','
          scope: punctuation.separator.attribute.simplerust
        - include: attribute-entry
        - match: '({{identifier}})'
          scope: entity.name.attribute.simplerust

  outer-attribute:
    - match: '#\['
      scope: punctuation.definition.attribute.begin.simplerust
      push:
        - meta_include_prototype: false
        - meta_scope: meta.annotation.simplerust
        - match: '\]'
          scope: punctuation.definition.attribute.end.simplerust
          pop: true
        - match: ','
          scope: punctuation.separator.attribute.simplerust
        - include: attribute-entry
        - match: '({{identifier}})'
          scope: entity.name.attribute.simplerust

  # Strings
  # ============================================================================
  strings:
    - include: byte-string
    - include: raw-byte-string
    - include: string
    - include: raw-string

  chars:
    - include: char
    - include: byte

  byte:
    - match: '(b)('')'
      captures:
        1: keyword.operator.string-prefix.simplerust
        2: punctuation.definition.string.begin.simplerust
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.single.simplerust
        # ASCII except ', \, \n, \r or \t
        - match: '[\x00-\x08\x0b-\x0c\x0e-\x26\x28-\x5b\x5d-\x7f]'
          set: byte-tail
        # Don't mark entire file invalid while writing, even though this is
        # not valid syntax.
        - match: '\n'
          pop: true
        - match: '{{escaped_byte}}'
          scope: constant.character.escape.simplerust
          set: byte-tail
        - match: ''
          set: byte-tail

  byte-tail:
    - match: "'"
      scope: string.quoted.single.simplerust punctuation.definition.string.end.simplerust
      pop: true
    - match: '\n'
      pop: true
    - match: '.'
      scope: invalid.illegal.byte.simplerust

  char:
    - match: "'"
      scope: punctuation.definition.string.begin.simplerust
      push:
        - meta_scope: string.quoted.single.simplerust
        - match: "[^'\\\\\n\r\t]"
          set: char-tail
        # Don't mark entire file invalid while writing, even though this is
        # not valid syntax.
        - match: '\n'
          pop: true
        - match: '{{escaped_char}}'
          scope: constant.character.escape.simplerust
          set: char-tail
        - match: ''
          set: char-tail

  char-tail:
    - match: "'"
      scope: string.quoted.single.simplerust punctuation.definition.string.end.simplerust
      pop: true
    - match: '\n'
      pop: true
    - match: '.'
      scope: invalid.illegal.char.simplerust

  escaped-char:
    - match: '{{escaped_char}}'
      scope: constant.character.escape.simplerust
    - match: '\\u\{[^}]*\}'
      scope: invalid.illegal.character.escape.simplerust
    - match: '\\.'
      scope: invalid.illegal.character.escape.simplerust


  byte-string:
    - match: '(b)(")'
      captures:
        1: keyword.operator.string-prefix.simplerust
        2: punctuation.definition.string.begin.simplerust
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.simplerust
        - match: '"'
          scope: punctuation.definition.string.end.simplerust
          pop: true
        - match: '{{escaped_byte}}'
          scope: constant.character.escape.simplerust
        - match: '\\.'
          scope: invalid.illegal.character.escape.simplerust

  raw-byte-string:
    - match: '(br)(#*)(")'
      captures:
        1: keyword.operator.string-prefix.simplerust
        2: punctuation.definition.string.begin.simplerust
        3: punctuation.definition.string.begin.simplerust
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.raw.simplerust
        - match: '"\2'
          scope: punctuation.definition.string.end.simplerust
          pop: true

  string:
    - match: '"'
      scope: punctuation.definition.string.begin.simplerust
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.simplerust
        - match: '"'
          scope: punctuation.definition.string.end.simplerust
          pop: true
        - include: escaped-char

  raw-string:
    - match: (r)(#*)(")
      captures:
        1: keyword.operator.string-prefix.simplerust
        2: punctuation.definition.string.begin.simplerust
        3: punctuation.definition.string.begin.simplerust
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.raw.simplerust
        - match: '"\2'
          scope: punctuation.definition.string.end.simplerust
          pop: true


  # Numbers
  # ============================================================================
  numbers:
    - match: '\b({{dec_literal}}(?:\.{{dec_literal}})?(?:{{float_exponent}})?)({{float_suffixes}})'
      captures:
        1: constant.numeric.float.simplerust
        2: storage.type.numeric.simplerust
    - match: '\b{{dec_literal}}\.{{dec_literal}}(?:{{float_exponent}})?'
      scope: constant.numeric.float.simplerust
    - match: '\b{{dec_literal}}{{float_exponent}}'
      scope: constant.numeric.float.simplerust
    - match: '\b{{dec_literal}}\.(?![A-Za-z._''])'
      scope: constant.numeric.float.simplerust

    - match: '\b({{dec_literal}})({{int_suffixes}})?\b'
      captures:
        1: constant.numeric.integer.decimal.simplerust
        2: storage.type.numeric.simplerust
    - match: '\b(0x[\h_]+)({{int_suffixes}})?\b'
      captures:
        1: constant.numeric.integer.hexadecimal.simplerust
        2: storage.type.numeric.simplerust
    - match: '\b(0o[0-7_]+)({{int_suffixes}})?\b'
      captures:
        1: constant.numeric.integer.octal.simplerust
        2: storage.type.numeric.simplerust
    - match: '\b(0b[0-1_]+)({{int_suffixes}})?\b'
      captures:
        1: constant.numeric.integer.binary.simplerust
        2: storage.type.numeric.simplerust
    # Check for invalid octal and binary sequences that didn't match above.
    - match: '\b(0(:?x|o|b)[0-9A-Za-z_]+)({{int_suffixes}})?\b'
      captures:
        1: invalid.illegal.character.numeric.simplerust
        3: storage.type.numeric.simplerust

  # Comments
  # ============================================================================
  comment_custom_tags:
    - match: '(TODO|NOTE):'
      captures:
        1: comment.tag.simplerust

  comments:
    - include: any_line_comment
    - include: any_block_comment


  any_line_comment:
    - include: inner_line_documentation_comment
    - include: outer_line_documentation_comment
    - include: line_comment

  line_comment:
    - match: '//'
      scope: punctuation.definition.comment.simplerust
      push:
        - meta_scope: comment.line.simplerust
        - include: comment_custom_tags
        - match: $\n?
          pop: true

  inner_line_documentation_comment:
    - match: '//!'
      scope: punctuation.definition.comment.documentation.inner.simplerust
      push:
        - meta_scope: comment.line.documentation.inner.simplerust
        - include: comment_custom_tags
        - match: $\n?
          pop: true

  outer_line_documentation_comment:
    - match: '///'
      scope: punctuation.definition.comment.documentation.outer.simplerust
      push:
        - meta_scope: comment.line.documentation.outer.simplerust
        - include: comment_custom_tags
        - match: $\n?
          pop: true

  any_block_comment:
    - include: inner_block_documentation_comment
    - include: outer_block_documentation_comment
    - include: block_comment

  block_comment:
    - match: '/\*'
      scope: punctuation.definition.comment.begin.simplerust
      push:
        - meta_scope: comment.block.simplerust
        - include: any_block_comment # Block comments can nest
        - include: comment_custom_tags
        - match: '\*/'
          scope: punctuation.definition.comment.end.simplerust
          pop: true

  inner_block_documentation_comment:
    - match: '/\*!'
      scope: punctuation.definition.comment.documentation.inner.begin.simplerust
      push:
        - meta_scope: comment.block.documentation.inner.simplerust
        - include: any_block_comment # Block comments can nest
        - include: comment_custom_tags
        - match: '\*/'
          scope: punctuation.definition.comment.documentation.inner.end.simplerust
          pop: true

  outer_block_documentation_comment:
    - match: '/\*\*'
      scope: punctuation.definition.comment.documentation.outer.begin.simplerust
      push:
        - meta_scope: comment.block.documentation.outer.simplerust
        - include: any_block_comment # Block comments can nest
        - include: comment_custom_tags
        - match: '\*/'
          scope: punctuation.definition.comment.documentation.outer.end.simplerust
          pop: true
